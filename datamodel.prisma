enum Permission {
  IT
  ADMIN
  SCIENTIST
  MENTOR
  TEACHER
  STUDENT
  PARTICIPANT
}

enum TaskType {
  TASK
  SURVEY
  BLOCK
}

type Profile {
  id: ID! @id
  username: String! @unique
  permissions: [Permission] @scalarList(strategy: RELATION)
  authEmail: [AuthEmail]!
  authToken: [AuthToken]!
  authInvite: [AuthInvite]! @relation(name:"Owner")
  authParticipant: [AuthParticipant]!
  results: [Result]!
  teacherIn: [Class]! @relation(name:"Classcreator")
  studentIn: [Class]! @relation(name:"Studentofclass")
  participantIn: [Study]! @relation(name:"Participantofstudy")
  researcherIn: [Study]! @relation(name:"Creatorofstudy")
  taskCreatorIn: [Task]! @relation(name:"Creatoroftask")
  consentCreatorIn: [Consent]! @relation(name:"Creatorofconsent")
  collaboratorInStudy: [Study]! @relation(name:"Studycollaborator")
  collaboratorInTask: [Task]! @relation(name:"Taskcollaborator")
  collaboratorInConsent: [Consent]! @relation(name:"Consentcollaborator")
  consentGivenFor: [Consent]! @relation(name:"Consentparticipant")
  image: String
  largeImage: String
  info: Json
  generalInfo: Json
  tasksInfo: Json
  studiesInfo: Json
  consentsInfo: Json
  publicId: String @unique
  journals: [Journal]! @relation(name:"CreatorOfJournal")
  posts: [Post]! @relation(name:"AuthorOfPost")
  creatorOfProposal: [ProposalBoard]! @relation(name:"CreatorOfProposalTemplate")
  authorOfProposal: [ProposalBoard]! @relation(name:"AuthorOfProposal")
  collaboratorOnProposal: [ProposalBoard]! @relation(name:"CollaboratorOnProposal")
  assignedToProposalSection: [ProposalSection]! @relation(name:"AssignedToProposalSection")
  assignedToProposalCard: [ProposalCard]! @relation(name:"AssignedToProposalCard")
  publicReadableId: String
  reviews: [Review]! @relation(name:"AuthorOfReview")
  classNetworksCreated: [ClassNetwork]! @relation(name:"Classnetworkcreator")
  authorOfWord: [Word]! @relation(name:"WordAuthor")
  memberOfTalk: [Talk]! @relation(name:"TalkMember")
  authorOfTalk: [Talk]! @relation(name:"TalkAuthor")
  authorOfAssignment: [Assignment]! @relation(name:"AssignmentAuthor")
  authorOfHomework: [Homework]! @relation(name:"HomeworkAuthor")
  favoriteTasks: [Task]! @relation(name:"FavoriteTasks")
  mentorIn: [Class]! @relation(name:"ClassMentor")
  isPublic: Boolean
  creatorOfScript: [Script]! @relation(name:"ScriptCreator")
  authorOfScript: [Script]! @relation(name:"ScriptAuthor")
  collaboratorOnScript: [Script]! @relation(name:"ScriptCollaborators")
  tags: [Tag]! @relation(name:"TagProfiles")
  updates: [Update]! @relation(name:"PlatformUpdates")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type AuthEmail {
  id: ID! @id
  email: String @unique
  password: String!
  resetToken: String
  resetTokenExpiry: String
  profile: Profile!
  settings: Json
}

type AuthParticipant {
  id: ID! @id
  email: String @unique
  password: String!
  resetToken: String
  resetTokenExpiry: String
  profile: Profile!
  settings: Json
}

type AuthToken {
  id: ID! @id
  token: String! @unique
  tokenExpiry: String
  profile: Profile!
  email: String @unique
}

type AuthInvite {
  id: ID! @id
  profile: Profile! @relation(name:"Owner")
  invitedIn: Class! @relation(name:"Invite")
}

type School {
  id: ID! @id
  title: String!
  description: String
  image: String
  largeImage: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  creator: Profile!
  tags: [Tag]! @relation(name:"TagSchools")
}

type Class {
  id: ID! @id
  code: String! @unique
  title: String!
  description: String
  image: String
  largeImage: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  creator: Profile! @relation(name:"Classcreator")
  students: [Profile]! @relation(name:"Studentofclass")
  invites: [AuthInvite]! @relation(name:"Invite")
  network: [ClassNetwork] @relation(name:"Classnetwork")
  assignments: [Assignment]! @relation(name:"ClassAssignment")
  mentors: [Profile]! @relation(name:"ClassMentor")
  studies: [Study]! @relation(name:"StudyClasses")
  settings: Json
  tags: [Tag]! @relation(name:"TagClasses")
}

type ClassNetwork {
  id: ID! @id
  title: String
  description: String
  settings: Json
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  creator: Profile! @relation(name:"Classnetworkcreator")
  classes: [Class]! @relation(name:"Classnetwork")
  tags: [Tag]! @relation(name:"TagClassNetworks")
}

enum ResultType {
  REVIEW
  TEST
  MAIN
}

type Result {
  id: ID! @id
  template: Template #relationship to Template
  task: Task!
  user: Profile #relationship to Profile
  guest: Guest #relationship to Guest Profile
  quantity: Int!
  data: Json
  dataPolicy: String
  token: String @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  payload: String
  study: Study #relationship to Study
  info: Json
  incrementalData: [Data] @relation(name:"Incrementaldata")
  fullData: Data  @relation(name:"Fulldata")
  resultType: ResultType
  testVersion: String
}

type Data {
  id: ID! @id
  content: String
}

type Study {
  id: ID! @id
  title: String!
  slug: String! @unique
  shortDescription: String
  description: String
  descriptionInProposalCard: ProposalCard @relation(name:"ProposalCardStudyDescription")
  author: Profile! @relation(name:"Creatorofstudy")
  tasks: [Task]!
  settings: Json
  participants: [Profile]! @relation(name:"Participantofstudy")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  image: String
  largeImage: String
  info: Json
  collaborators: [Profile]! @relation(name:"Studycollaborator")
  consent: [Consent]!
  messages: [Message]!
  public: Boolean
  submitForPublishing: Boolean
  components: Json
  proposal: [ProposalBoard]! @relation(name:"StudyProposal")
  reviews: [Review]! @relation(name:"StudyReview")
  featured: Boolean
  guests: [Guest]! @relation(name:"Guestparticipantofstudy")
  isHidden: Boolean
  classes: [Class]! @relation(name:"StudyClasses")
  scripts: [Script]! @relation(name:"ScriptStudies")
  tags: [Tag]! @relation(name:"TagStudies")
  diagram: String
}

type Task {
  id: ID! @id
  title: String!
  subtitle: String
  slug: String! @unique
  description: String
  descriptionForParticipants: String
  template: Template
  author: Profile! @relation(name:"Creatoroftask")
  parameters: Json
  settings: Json
  link: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  collaborators: [Profile]! @relation(name:"Taskcollaborator")
  consent: Consent
  public: Boolean
  submitForPublishing: Boolean
  taskType: TaskType
  isOriginal: Boolean
  isExternal: Boolean
  tags: [Tag]! @relation(name:"TagTasks")
  image: String
  largeImage: String
}

type Template {
  id: ID! @id
  title: String!
  slug: String! @unique
  shortDescription: String
  description: String
  image: String
  largeImage: String
  author: Profile!
  parameters: Json
  script: String
  style: String
  tasks: [Task]!
  settings: Json
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Consent {
  id: ID! @id
  title: String!
  slug: String! @unique
  description: String
  organization: String
  info: Json
  settings: Json
  author: Profile! @relation(name:"Creatorofconsent")
  collaborators: [Profile]! @relation(name:"Consentcollaborator")
  participants: [Profile]! @relation(name:"Consentparticipant")
  studies: [Study]!
  tasks: [Task]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Message {
  id: ID! @id
  content: String!
  author: Profile!
  info: Json
  settings: Json
  expireAt: DateTime
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Journal {
  id: ID! @id
  title: String
  description: String
  creator: Profile! @relation(name:"CreatorOfJournal")
  posts: [Post]!
  settings: Json
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  tags: [Tag]! @relation(name:"TagJournals")
}

type Post {
  id: ID! @id
  author: Profile! @relation(name:"AuthorOfPost")
  title: String
  content: String
  journal: Journal!
  settings: Json
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  tags: [Tag]! @relation(name:"TagPosts")
}

type ProposalBoard {
  id: ID! @id
  title: String!
  slug: String! @unique
  description: String
  creator: Profile @relation(name:"CreatorOfProposalTemplate")
  author: Profile @relation(name:"AuthorOfProposal")
  collaborators: [Profile]! @relation(name:"CollaboratorOnProposal")
  study: Study @relation(name:"StudyProposal")
  isTemplate: Boolean
  sections: [ProposalSection]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  isSubmitted: Boolean
  checklist: Json
  reviews: [Review]! @relation(name:"ProposalReview")
  tags: [Tag]! @relation(name:"TagProposals")
}

type ProposalSection {
  id: ID! @id
  title: String!
  description: String
  position: Float!
  board: ProposalBoard!
  assignedTo: [Profile]! @relation(name:"AssignedToProposalSection")
  cards: [ProposalCard]
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProposalCard {
  id: ID! @id
  title: String!
  description: String
  position: Float!
  content: String
  section: ProposalSection!
  assignedTo: [Profile]! @relation(name:"AssignedToProposalCard")
  settings: Json
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  comment: String
  tags: [Tag]! @relation(name:"TagProposalCards")
  studyDescription: [Study]! @relation(name:"ProposalCardStudyDescription")
}

enum ReviewStage {
  INDIVIDUAL
  SYNTHESIS
}

type Review {
  id: ID! @id
  study: Study @relation(name:"StudyReview")
  proposal: ProposalBoard @relation(name:"ProposalReview")
  author: Profile @relation(name:"AuthorOfReview")
  settings: Json
  content: Json
  stage: ReviewStage
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Word {
  id: ID! @id
  author: Profile @relation(name:"WordAuthor")
  talk: Talk! @relation(name:"TalkWords")
  message: String!
  new: Boolean
  settings: Json
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Talk {
  id: ID! @id
  author: Profile @relation(name:"TalkAuthor")
  members: [Profile]! @relation(name:"TalkMember")
  words: [Word]! @relation(name:"TalkWords")
  settings: Json
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Assignment {
  id: ID! @id
  author: Profile @relation(name:"AssignmentAuthor")
  classes: [Class]! @relation(name:"ClassAssignment")
  homework: [Homework]! @relation(name:"ClassHomework")
  title: String
  content: String
  settings: Json
  public: Boolean
  isTemplate: Boolean
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  tags: [Tag]! @relation(name:"TagAssignments")
}

type Homework {
  id: ID! @id
  author: Profile @relation(name:"HomeworkAuthor")
  assignment: Assignment @relation(name:"ClassHomework")
  title: String
  content: String
  settings: Json
  public: Boolean
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  tags: [Tag]! @relation(name:"TagHomeworks")
}

type Guest {
  id: ID! @id
  publicId: String @unique
  publicReadableId: String
  results: [Result]!
  guestParticipantIn: [Study]! @relation(name:"Guestparticipantofstudy")
  info: Json
  generalInfo: Json
  tasksInfo: Json
  studiesInfo: Json
  consentsInfo: Json
  guestAccountExpiry: String
}

type Script {
  id: ID! @id
  title: String!
  slug: String! @unique
  description: String
  creator: Profile @relation(name:"ScriptCreator")
  author: Profile @relation(name:"ScriptAuthor")
  collaborators: [Profile]! @relation(name:"ScriptCollaborators")
  studies: [Study]! @relation(name:"ScriptStudies")
  isTemplate: Boolean
  isPublic: Boolean
  isFeatured: Boolean
  settings: Json
  content: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  tags: [Tag]! @relation(name:"TagScripts")
}

type Tag {
  id: ID! @id
  title: String!
  slug: String! @unique
  description: String
  profiles: [Profile]! @relation(name:"TagProfiles")
  schools: [School]! @relation(name:"TagSchools")
  classes: [Class]! @relation(name:"TagClasses")
  classNetworks: [ClassNetwork]! @relation(name:"TagClassNetworks")
  studies: [Study]! @relation(name:"TagStudies")
  tasks: [Task]! @relation(name:"TagTasks")
  journals: [Journal]! @relation(name:"TagJournals")
  posts: [Post]! @relation(name:"TagPosts")
  proposals: [ProposalBoard]! @relation(name:"TagProposals")
  proposalCards: [ProposalCard]! @relation(name:"TagProposalCards")
  assignments: [Assignment]! @relation(name:"TagAssignments")
  homeworks: [Homework]! @relation(name:"TagHomeworks")
  scripts: [Script]! @relation(name:"TagScripts")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Update {
  id: ID! @id
  user: Profile! @relation(name:"PlatformUpdates")
  updateArea: String
  link: String
  content: Json
  hasOpen: Boolean
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
