# import * from './generated/prisma.graphql'

type Query {
  me: Profile
  users(
    where: ProfileWhereInput
    orderBy: ProfileOrderByInput
    skip: Int
    first: Int
  ): [Profile]!
  schools: [School]!
  class(where: ClassWhereUniqueInput): Class
  classes(
    where: ClassWhereInput
    orderBy: ClassOrderByInput
    skip: Int
    first: Int
  ): [Class]!
  myClasses: [Class]!
  myStudentClasses: [Class]!
  myStudentTeacherClasses: [Class]!
  myResults: [Result]!
  result(where: ResultWhereUniqueInput): Result
  results(
    where: ResultWhereInput
    orderBy: ResultOrderByInput
    skip: Int
    first: Int
  ): [Result]!
  myClassResults(where: ClassWhereUniqueInput): [Result]!
  myStudyResults(where: StudyWhereUniqueInput): [Result]!
  myTaskResults(where: TaskWhereUniqueInput): [Result]!
  studyResults(slug: String!): [Result]!
  myStudyParticipants(where: StudyWhereUniqueInput): Study
  template(where: TemplateWhereUniqueInput): Template
  templates(
    where: TemplateWhereInput
    orderBy: TemplateOrderByInput
    skip: Int
    first: Int
  ): [Template]!
  myTemplates(
    where: TemplateWhereInput
    orderBy: TemplateOrderByInput
    skip: Int
    first: Int
  ): [Template]!
  study(where: StudyWhereUniqueInput): Study
  studies(
    where: StudyWhereInput
    orderBy: StudyOrderByInput
    skip: Int
    first: Int
  ): [Study]!
  myAndPublicStudies(
    where: StudyWhereInput
    orderBy: StudyOrderByInput
    skip: Int
    first: Int
  ): [Study]!
  featuredStudies(
    where: StudyWhereInput
    orderBy: StudyOrderByInput
    skip: Int
    first: Int
  ): [Study]!
  myStudies(
    where: StudyWhereInput
    orderBy: StudyOrderByInput
    skip: Int
    first: Int
  ): [Study]!
  myParticipatedStudies(
    where: StudyWhereInput
    orderBy: StudyOrderByInput
    skip: Int
    first: Int
  ): [Study]!
  allStudies(
    where: StudyWhereInput
    orderBy: StudyOrderByInput
    skip: Int
    first: Int
  ): [Study]!
  task(where: TaskWhereUniqueInput): Task
  tasks(
    where: TaskWhereInput
    orderBy: TaskOrderByInput
    skip: Int
    first: Int
  ): [Task]!
  myTasks(
    where: TaskWhereInput
    orderBy: TaskOrderByInput
    skip: Int
    first: Int
  ): [Task]!
  myAndAllTasks(
    where: TaskWhereInput
    orderBy: TaskOrderByInput
    skip: Int
    first: Int
  ): [Task]!
  allTasks(
    where: TaskWhereInput
    orderBy: TaskOrderByInput
    skip: Int
    first: Int
  ): [Task]!
  consent(where: ConsentWhereUniqueInput): Consent
  consents: [Consent]!
  myConsents(
    where: ConsentWhereInput
    orderBy: ConsentOrderByInput
    skip: Int
    first: Int
  ): [Consent]!
  messages: [Message]!
  allUsernames: [Profile]!
  allPublicUsernames(usernames: [String]): [Profile]!
  classStudies(where: StudyWhereUniqueInput): [Study]!
  myJournals(
    where: JournalWhereInput
    orderBy: JournalOrderByInput
    skip: Int
    first: Int
  ): [Journal]!
  myPosts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    first: Int
  ): [Post]!
  posts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    first: Int
  ): [Post]!
  post(where: PostWhereUniqueInput): Post
  student(id: ID!): Profile
  journals(
    where: JournalWhereInput
    orderBy: JournalOrderByInput
    skip: Int
    first: Int
  ): [Journal]!

  proposalBoard(where: ProposalBoardWhereUniqueInput!): ProposalBoard
  proposalBoards(where: ProposalBoardWhereInput): [ProposalBoard]!
  proposalSection(where: ProposalSectionWhereUniqueInput!): ProposalSection
  proposalSections(where: ProposalSectionWhereInput): [ProposalSection]!
  proposalCard(where: ProposalCardWhereUniqueInput!): ProposalCard
  proposalCards(where: ProposalCardWhereInput): [ProposalCard]!

  review(where: ReviewWhereUniqueInput): Review
  reviews(
    where: ReviewWhereInput
    orderBy: ReviewOrderByInput
    skip: Int
    first: Int
  ): [Review]!

  proposalsFeaturedStudies: [ProposalBoard]
  proposalsMyStudies: [ProposalBoard]
  proposalsOfClass(
    where: ClassWhereInput
    orderBy: ClassOrderByInput
    skip: Int
    first: Int
  ): [ProposalBoard]!

  classNetwork(where: ClassNetworkWhereUniqueInput): ClassNetwork
  classNetworks(
    where: ClassNetworkWhereInput
    orderBy: ClassNetworkOrderByInput
    skip: Int
    first: Int
  ): [ClassNetwork]!

  participant(participantId: ID!, studyId: ID!): Profile
  guestParticipant(participantId: ID!, studyId: ID!): Guest
  participantResults(participantId: ID!, studyId: ID): [Result]!
  participantStudyResults(participantId: ID!, studyId: ID!): [Result]!

  myTalks: [Talk]!
  talk(where: TalkWhereUniqueInput): Talk

  assignments(where: AssignmentWhereInput): [Assignment]!
  assignment(where: AssignmentWhereUniqueInput): Assignment

  homeworks(where: HomeworkWhereInput): [Homework]!
  homework(where: HomeworkWhereUniqueInput): Homework
  myHomeworks(where: HomeworkWhereInput): [Homework]!

  favoriteTasks(selector: String!): [Task]!

  datas(
    where: DataWhereInput
    orderBy: DataOrderByInput
    skip: Int
    first: Int
  ): [Data]!
  data(where: DataWhereUniqueInput): Data

  guest(where: GuestWhereUniqueInput): Guest

  countStudies(where: StudyWhereInput): StudyConnection
  countComponents(where: TaskWhereInput): TaskConnection
  countTemplates(where: TemplateWhereInput): TemplateConnection
  countUsers(where: ProfileWhereInput): ProfileConnection
  countClasses(where: ClassWhereInput): ClassConnection
  countStudyParticipants(where: ProfileWhereInput): ProfileConnection
  countStudyGuestParticipants(where: GuestWhereInput): GuestConnection

  script(where: ScriptWhereUniqueInput!): Script
  scripts(where: ScriptWhereInput): [Script]!
  myScripts: [Script]!

  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput): [Tag]!

  update(where: UpdateWhereUniqueInput!): Update
  updates(where: UpdateWhereInput): [Update]!
  myUpdates(orderBy: UpdateOrderByInput): [Update]!

  participantsInStudy(
    where: ProfileWhereInput
    orderBy: ProfileOrderByInput
    skip: Int
    first: Int
  ): [Profile]!

  guestParticipantsInStudy(
    where: GuestWhereInput
    orderBy: GuestOrderByInput
    skip: Int
    first: Int
  ): [Guest]!

  profile(where: ProfileWhereUniqueInput): Profile

  words(where: WordWhereInput): [Word]!
  word(where: WordWhereUniqueInput): Word

  summaryResults(where: SummaryResultWhereInput): [SummaryResult]!
}

type Mutation {
  login(usernameEmail: String!, password: String!): Profile!
  signUp(
    username: String!
    email: String
    password: String!
    user: Json
    study: Json
    class: Json
    info: Json
    permissions: [Permission]
  ): Profile!
  requestReset(usernameEmail: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): Profile!
  confirmEmail(email: String!, confirmationToken: String!): SuccessMessage
  emailSignUp(
    email: String!
    password: String!
    username: String!
    permissions: [Permission]
  ): Profile!
  emailLogin(email: String!, password: String!): Profile!
  signout: SuccessMessage
  serviceSignUp(
    token: String!
    user: Json
    study: Json
    class: Json
    info: Json
    permissions: [Permission]
  ): Profile!
  serviceLogin(token: String!, info: Json, study: Json): Profile!
  participantSignUp(
    username: String!
    email: String
    password: String!
    user: Json
    study: Json
    info: Json
  ): Profile!
  participantLogin(
    usernameEmail: String!
    password: String!
    info: Json
    study: Json
  ): Profile!
  tokenSignUp(username: String!, token: String!, email: String): Profile!
  tokenLogin(username: String!): Profile!
  sendParticipantUsername(email: String!): SuccessMessage
  inviteSignUp(
    username: String!
    invitedIn: ID!
    image: String
    largeImage: String
    info: Json
  ): Profile!
  inviteLogin(username: String!, invitedIn: ID!): Profile!
  createSchool(
    title: String!
    description: String
    image: String
    largeImage: String
  ): School!
  createClass(
    title: String!
    description: String
    image: String
    largeImage: String
    settings: Json
  ): Class!
  updateClass(
    id: ID!
    code: String
    title: String
    description: String
    image: String
    largeImage: String
    settings: Json
  ): Class!
  deleteClass(id: ID!): Class
  joinClass(id: ID!): SuccessMessage
  joinClassWithProfile(id: ID!, email: String): SuccessMessage
  joinClassAsMentorWithProfile(id: ID!, email: String): SuccessMessage
  leaveClass(id: ID!): SuccessMessage
  expelFromClass(classId: ID!, studentId: ID!): SuccessMessage
  moveToClass(classId: ID!, studentId: ID!): SuccessMessage
  removeMentorFromClass(classId: ID!, mentorId: ID!): SuccessMessage
  addResult(templateId: ID!, data: Json, dataPolicy: String): Result!
  deleteResult(id: ID!): Result
  submitResultFromAPI(
    userId: ID
    templateId: ID
    taskId: ID
    studyId: ID
    data: Json
    dataString: String
    metadata: Json
    dataPolicy: String
    resultType: ResultType
    version: String
    guestId: ID
  ): Result
  submitAggregatedResultFromAPI(
    userId: ID
    guestId: ID
    studyId: ID
    templateId: ID
    taskId: ID
    version: String
    metadataId: String
    dataPolicy: String
    fullResultId: ID
    data: Json
  ): SuccessMessage
  updateResultsInfo(id: ID!, info: Json): SuccessMessage
  createTemplate(
    title: String!
    shortDescription: String
    description: String
    image: String
    largeImage: String
    parameters: Json
    script: String
    style: String
    settings: Json
  ): Template!
  updateTemplate(
    id: ID!
    title: String
    shortDescription: String
    description: String
    parameters: Json
    script: String
    style: String
    settings: Json
  ): Template!
  deleteTemplate(id: ID!): Template
  createTask(
    title: String!
    subtitle: String
    slug: String
    templateId: ID
    description: String
    parameters: Json
    settings: Json
    collaborators: [String]
    consent: ID
    taskType: TaskType
    submitForPublishing: Boolean
    isOriginal: Boolean
    isExternal: Boolean
    link: String
    image: String
    largeImage: String
  ): Task!
  updateTask(
    id: ID!
    slug: String
    title: String
    subtitle: String
    description: String
    descriptionForParticipants: String
    parameters: Json
    settings: Json
    collaborators: [String]
    consent: ID
    taskType: TaskType
    submitForPublishing: Boolean
    link: String
    image: String
    largeImage: String
  ): Task!
  deleteTask(id: ID!): Task
  publishTaskToggle(id: ID!): Task
  createTaskWithTemplate(
    title: String!
    subtitle: String
    slug: String
    description: String
    parameters: Json
    settings: Json
    collaborators: [String]
    consent: ID
    taskType: TaskType
    submitForPublishing: Boolean
    template: Json
    isOriginal: Boolean
    image: String
    largeImage: String
  ): Task!
  updateTaskWithTemplate(
    id: ID!
    slug: String
    title: String
    subtitle: String
    description: String
    descriptionForParticipants: String
    parameters: Json
    settings: Json
    collaborators: [String]
    consent: ID
    taskType: TaskType
    submitForPublishing: Boolean
    template: Json
    image: String
    largeImage: String
  ): Task!
  createStudy(
    title: String!
    description: String
    descriptionInProposalCardId: ID
    shortDescription: String
    settings: Json
    image: String
    largeImage: String
    info: Json
    consentId: [ID]
    components: Json
    submitForPublishing: Boolean
    collaborators: [String]
    classes: [String]
    tags: [ID]
    diagram: String
  ): Study!
  updateStudy(
    id: ID!
    slug: String
    title: String
    description: String
    descriptionInProposalCardId: ID
    shortDescription: String
    settings: Json
    image: String
    largeImage: String
    info: Json
    collaborators: [String]
    consentId: [ID]
    public: Boolean
    components: Json
    submitForPublishing: Boolean
    isHidden: Boolean
    classes: [String]
    tags: [ID]
    diagram: String
  ): Study!
  manageStudyVisibility(id: ID!, public: Boolean, featured: Boolean): Study
  preDeleteStudy(id: ID!): Study
  deleteStudy(id: ID!): Study
  buildStudy(id: ID!, tasks: [ID]!): Study!
  joinStudy(id: ID!, info: Json, study: Json): Profile!
  leaveStudy(id: ID!): SuccessMessage
  updateStudyConsent(id: ID!, info: Json): Study!
  emailMyStudyParticipants(
    where: StudyWhereUniqueInput
    info: Json
  ): SuccessMessage
  createConsent(
    title: String!
    organization: String!
    description: String
    info: Json
    settings: Json
    link: String
    collaborators: [String]
    studies: [String]
    tasks: [String]
  ): Consent!
  updateConsent(
    id: ID!
    title: String
    organization: String
    description: String
    info: Json
    settings: Json
    link: String
    collaborators: [String]
    studies: [String]
    tasks: [String]
  ): Consent!
  deleteConsent(id: ID!): Consent
  createMessage(
    content: String
    info: Json
    settings: Json
    expireAt: DateTime
  ): Message!
  updateMessage(
    id: ID!
    content: String
    info: Json
    settings: Json
    expireAt: DateTime
  ): Message!
  deleteMessage(id: ID!): Message
  createJournal(title: String, description: String, settings: Json): Journal!
  updateJournal(
    id: ID!
    title: String
    description: String
    settings: Json
  ): Journal!
  deleteJournal(id: ID!): Journal
  createPost(
    title: String
    content: String
    settings: Json
    journal: ID!
  ): Post!
  updatePost(id: ID!, title: String, content: String, settings: Json): Post!
  deletePost(id: ID!): Post

  createProposalBoard(
    title: String!
    description: String
    collaborators: [String]
    study: ID
    isTemplate: Boolean
    sections: [ID]
  ): ProposalBoard!
  updateProposalBoard(
    id: ID!
    title: String
    description: String
    collaborators: [String]
    sections: [ID]
    isSubmitted: Boolean
    checklist: Json
  ): ProposalBoard!

  deleteProposalBoard(id: ID!): SuccessMessage

  copyProposalBoard(id: ID!, study: ID): ProposalBoard!

  createProposalSection(
    boardId: ID!
    title: String!
    description: String
    position: Float!
    assignedTo: [String]
    cards: [ID]
  ): ProposalSection!
  updateProposalSection(
    id: ID!
    boardId: ID!
    title: String
    description: String
    position: Float
    assignedTo: [String]
    cards: [ID]
  ): ProposalSection!
  deleteProposalSection(id: ID!, boardId: ID!): ProposalSection!

  createProposalCard(
    boardId: ID!
    title: String!
    content: String
    sectionId: ID!
    position: Float!
    assignedTo: [String]
  ): ProposalCard!

  updateProposalCard(
    id: ID!
    boardId: ID!
    title: String
    description: String
    content: String
    comment: String
    sectionId: ID
    position: Float
    assignedTo: [String]
    settings: Json
  ): ProposalCard!

  deleteProposalCard(id: ID!, boardId: ID!): ProposalCard!

  createReview(
    studyId: ID!
    proposalId: ID!
    stage: ReviewStage
    settings: Json
    content: Json
  ): Review!
  updateReview(
    id: ID!
    stage: ReviewStage
    settings: Json
    content: Json
  ): Review!
  deleteReview(id: ID!): Review!

  createClassNetwork(
    title: String
    description: String
    settings: Json
    classes: [ID]
  ): ClassNetwork!
  updateClassNetwork(
    id: ID!
    title: String
    description: String
    settings: Json
    classes: [ID]
  ): ClassNetwork!
  deleteClassNetwork(id: ID!): ClassNetwork!

  changeStatusParticipantStudyResults(
    participantId: ID!
    studyId: ID!
    status: ResultType!
  ): SuccessMessage

  changeStatusGuestParticipantStudyResults(
    participantId: ID!
    studyId: ID!
    status: ResultType!
  ): SuccessMessage

  changeResultStatus(id: ID!, status: ResultType!): SuccessMessage

  editAccount(
    username: String
    email: String
    password: String
    info: Json
    isPublic: Boolean
  ): Profile

  createWord(talk: ID!, message: String!, isMain: Boolean, parent: ID, settings: Json): Word
  updateWord(id: ID!, message: String, settings: Json): Word
  deleteWord(id: ID!): SuccessMessage

  createTalk(members: [ID], studies: [ID], classes: [ID], settings: Json): Talk
  updateTalk(id: ID!, members: [ID], studies: [ID], classes: [ID], settings: Json): Talk
  addMembersToTalk(id: ID!, members: [ID]!): Talk
  leaveGroupChat(id: ID!): Talk
  deleteGroupChat(id: ID!): Talk
  updateChatSettings(id: ID!, settings: Json): Talk

  createAssignment(
    title: String
    content: String
    settings: Json
    classId: ID
    public: Boolean
    isTemplate: Boolean
  ): Assignment
  updateAssignment(
    id: ID!
    title: String
    content: String
    settings: Json
    public: Boolean
    isTemplate: Boolean
  ): Assignment
  deleteAssignment(id: ID!): Assignment

  createHomework(
    assignmentId: ID!
    title: String
    content: String
    settings: Json
    public: Boolean
  ): Homework
  updateHomework(
    id: ID!
    title: String
    content: String
    settings: Json
    public: Boolean
  ): Homework
  deleteHomework(id: ID!): Homework

  manageFavoriteTasks(id: ID!, action: String): SuccessMessage

  joinStudyAsGuest(id: ID!, info: Json, study: Json): Guest

  updateUserStudyHideInDevelop(studyId: ID!, isHidden: Boolean!): SuccessMessage

  createScript(
    title: String!
    description: String
    content: String
    isTemplate: Boolean
    isPublic: Boolean
    isFeatured: Boolean
  ): Script!
  copyScript(id: ID!): Script!
  updateScript(
    id: ID!
    title: String
    description: String
    isTemplate: Boolean
    isPublic: Boolean
    isFeatured: Boolean
    settings: Json
    content: String
  ): Script!
  deleteScript(id: ID!): SuccessMessage

  createTag(title: String!, description: String): Tag!
  updateTag(id: ID!, title: String, description: String): Tag!
  deleteTag(id: ID!): SuccessMessage

  createUpdate(forUsers: [ID]!, updateArea: String, link: String, content: Json): SuccessMessage
  openUpdate(id: ID!, hasOpen: Boolean!): SuccessMessage
  deleteUpdate(id: ID!): SuccessMessage
}

type SuccessMessage {
  message: String
}

type Profile {
  id: ID!
  username: String!
  permissions: [Permission!]!
  results: [Result]!
  studentIn: [Class]!
  info: Json
  image: String
  largeImage: String
  participantIn: [Study]!
  teacherIn: [Class]!
  researcherIn: [Study]!
  collaboratorInStudy: [Study]!
  taskCreatorIn: [Task]!
  collaboratorInTask: [Task]!
  authEmail: [AuthEmail]!
  consentGivenFor: [Consent]!
  generalInfo: Json
  tasksInfo: Json
  studiesInfo: Json
  consentsInfo: Json
  publicId: String
  journals: [Journal]!
  posts: [Post]!
  publicReadableId: String
  reviews: [Review]!
  classNetworksCreated: [ClassNetwork]!
  favoriteTasks: [Task]!
  authorOfHomework: [Homework]!
  mentorIn: [Class]!
  isPublic: Boolean
  updates: [Update]!
  createdAt: DateTime
  updatedAt: DateTime
}
